FROM alpine:3.15
LABEL org.opencontainers.image.authors="artembo@me.com; piligrim@rootnix.net"

RUN addgroup -S tarantool \
    && adduser -S -G tarantool tarantool \
    && apk add --no-cache 'su-exec>=0.2'

# An ARG instruction goes out of scope at the end of the build
# stage where it was defined. To use an arg in multiple stages,
# each stage must include the ARG instruction
ARG TNT_VER
ARG NPROC
ENV TARANTOOL_VERSION=${TNT_VER} \
    TARANTOOL_DOWNLOAD_URL=https://github.com/tarantool/tarantool.git \
    TARANTOOL_INSTALL_LUADIR=/usr/local/share/tarantool \
    GPERFTOOLS_REPO=https://github.com/gperftools/gperftools.git \
    GPERFTOOLS_TAG=gperftools-2.9.1 \
    LUAROCKS_URL=https://github.com/tarantool/luarocks/archive/6e6fe62d9409fe2103c0fd091cccb3da0451faf5.tar.gz \
    LUAROCK_VSHARD_VERSION=0.1.20 \
    LUAROCK_AVRO_SCHEMA_VERSION=3.0.6 \
    LUAROCK_EXPERATIOND_VERSION=1.1.1 \
    LUAROCK_QUEUE_VERSION=1.2.0 \
    LUAROCK_CONNPOOL_VERSION=1.1.1 \
    LUAROCK_HTTP_VERSION=1.3.0 \
    LUAROCK_MEMCACHED_VERSION=1.0.1 \
    LUAROCK_METRICS_VERSION=0.14.0 \
    LUAROCK_TARANTOOL_PG_VERSION=2.0.2 \
    LUAROCK_TARANTOOL_MYSQL_VERSION=2.1.1 \
    LUAROCK_TARANTOOL_MQTT_VERSION=1.5.1 \
    LUAROCK_TARANTOOL_GIS_VERSION=1.0.1 \
    LUAROCK_TARANTOOL_PROMETHEUS_VERSION=1.0.4 \
    LUAROCK_TARANTOOL_GPERFTOOLS_VERSION=1.0.1

COPY files/gperftools_alpine.diff /

ARG ENABLE_BUNDLED_LIBYAML \
    LUAJIT_DISABLE_SYSPROF \
    GC64

RUN set -x \
    && apk add --no-cache --virtual .run-deps.1 \
        libstdc++ \
        readline \
        openssl \
        yaml \
        lz4 \
        binutils \
        ncurses \
        libgomp \
        lua \
        tar \
        zip \
        zlib \
        libunwind \
        icu \
        ca-certificates \
    && apk add --no-cache --virtual .build-deps.1 \
        gcc \
        g++ \
        cmake \
        file \
        readline-dev \
        openssl-dev \
        yaml-dev \
        bsd-compat-headers \
        lz4-dev \
        zlib-dev \
        binutils-dev \
        ncurses-dev \
        lua-dev \
        musl-dev \
        make \
        git \
        libunwind-dev \
        autoconf \
        automake \
        libtool \
        linux-headers \
        go \
        icu-dev \
        wget \
    && : "---------- gperftools ----------" \
    && mkdir -p /usr/src/gperftools \
    && git clone "$GPERFTOOLS_REPO" /usr/src/gperftools \
    && git -C /usr/src/gperftools checkout "$GPERFTOOLS_TAG" \
    && (cd /usr/src/gperftools; \
        ./autogen.sh; \
        ./configure --disable-libunwind --enable-frame-pointers; \
        make -j ${NPROC}; \
        cp .libs/libprofiler.so* /usr/local/lib/) \
    && : "---------- pprof for gperftools ----------" \
    && : "To avoid of the issue:" \
    && : "'The master branch is Incompatible with go version < 1.13 #538'" \
    && : "https://github.com/google/pprof/issues/538" \
    && : "use latest workable commits with the old GO versions" \
    && ( export GOPATH=/root/go && \
       export PATH=${GOPATH}/bin:/usr/local/go/bin:$PATH && \
       export GOBIN=$GOROOT/bin && \
       mkdir -p ${GOPATH}/src ${GOPATH}/bin && \
       go install github.com/google/pprof@latest ) \
    && : "---------- tarantool ----------" \
    && mkdir -p /usr/src/tarantool \
    && git clone "$TARANTOOL_DOWNLOAD_URL" /usr/src/tarantool \
    && git -C /usr/src/tarantool checkout "$TARANTOOL_VERSION" \
    && git -C /usr/src/tarantool submodule update --init --recursive \
    && (cd /usr/src/tarantool; \
       echo "WARNING: Temporary fix for test/unit/cbus_hang test" ; \
       git cherry-pick d7fa6d34ab4e0956fe8a80966ba628e0e3f81067 2>/dev/null || \
           git cherry-pick --abort ; \
       cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo\
             -DENABLE_BUNDLED_LIBYAML:BOOL=${ENABLE_BUNDLED_LIBYAML}\
             -DENABLE_BACKTRACE:BOOL=ON\
             -DLUAJIT_DISABLE_SYSPROF:BOOL=${LUAJIT_DISABLE_SYSPROF} \
             -DLUAJIT_ENABLE_GC64:BOOL=${GC64} \
             -DENABLE_DIST:BOOL=ON\
             .) \
    && make -C /usr/src/tarantool -j ${NPROC} \
    && make -C /usr/src/tarantool install \
    && make -C /usr/src/tarantool clean \
    && : "---------- luarocks ----------" \
    && wget -O luarocks.tar.gz "$LUAROCKS_URL" \
    && mkdir -p /usr/src/luarocks \
    && tar -xzf luarocks.tar.gz -C /usr/src/luarocks --strip-components=1 \
    && (cd /usr/src/luarocks; \
        ./configure; \
        make -j ${NPROC} build; \
        make install) \
    && rm -r /usr/src/luarocks \
    && rm -rf /usr/src/tarantool \
    && rm -rf /usr/src/gperftools \
    && rm -rf /usr/src/go \
    && : "---------- remove build deps ----------" \
    && apk del .build-deps.1

RUN mkdir -p /usr/local/etc/luarocks \
    && mkdir -p /usr/local/etc/tarantool/rocks

COPY files/luarocks-config.lua /usr/local/etc/luarocks/config-5.1.lua
COPY files/luarocks-config.lua /usr/local/etc/tarantool/rocks/config-5.1.lua

ARG ROCKS_INSTALLER
RUN set -x \
    && apk add --no-cache --virtual .run-deps.2 \
        mariadb-connector-c-dev \
        libpq \
        cyrus-sasl \
        libev \
    && apk add --no-cache --virtual .build-deps.2 \
        git \
        cmake \
        make \
        coreutils \
        gcc \
        g++ \
        postgresql-dev \
        lua-dev \
        musl-dev \
        cyrus-sasl-dev \
        libev-dev \
        libucontext \
        libucontext-dev \
        libressl-dev \
        wget \
        unzip \
    && mkdir -p /rocks \
    && : "---------- proj (for gis module) ----------" \
    && wget -O proj.tar.gz http://download.osgeo.org/proj/proj-4.9.3.tar.gz \
    && mkdir -p /usr/src/proj \
    && tar -xzf proj.tar.gz -C /usr/src/proj --strip-components=1 \
    && (cd /usr/src/proj; \
        ./configure; \
        make -j ${NPROC}; \
        make install) \
    && rm -r /usr/src/proj \
    && rm -rf /usr/src/proj \
    && rm -rf /proj.tar.gz \
    && : "---------- geos (for gis module) ----------" \
    && wget -O geos.tar.bz2 http://download.osgeo.org/geos/geos-3.6.0.tar.bz2 \
    && mkdir -p /usr/src/geos \
    && tar -xjf geos.tar.bz2 -C /usr/src/geos --strip-components=1 \
    && (cd /usr/src/geos; \
        ./configure; \
        make -j ${NPROC}; \
        make install) \
    && rm -r /usr/src/geos \
    && rm -rf /usr/src/geos \
    && rm -rf /geos.tar.bz2 \
    && : "---------- luarocks ----------" \
    && : "ldoc" \
    && ${ROCKS_INSTALLER} install ldoc \
    && : "lua-term" \
    && ${ROCKS_INSTALLER} install lua-term \
    && : "avro" \
    && ${ROCKS_INSTALLER} install avro-schema $LUAROCK_AVRO_SCHEMA_VERSION \
    && : "expirationd" \
    && ${ROCKS_INSTALLER} install expirationd $LUAROCK_EXPERATIOND_VERSION \
    && : "queue" \
    && ${ROCKS_INSTALLER} install queue $LUAROCK_QUEUE_VERSION \
    && : "connpool" \
    && ${ROCKS_INSTALLER} install connpool $LUAROCK_CONNPOOL_VERSION \
    && : "vshard" \
    && ${ROCKS_INSTALLER} install vshard $LUAROCK_VSHARD_VERSION \
    && : "http" \
    && ${ROCKS_INSTALLER} install http $LUAROCK_HTTP_VERSION \
    && : "pg" \
    && ${ROCKS_INSTALLER} install pg $LUAROCK_TARANTOOL_PG_VERSION \
    && : "mysql" \
    && ${ROCKS_INSTALLER} install mysql $LUAROCK_TARANTOOL_MYSQL_VERSION \
    && : "memcached" \
    && ${ROCKS_INSTALLER} install memcached $LUAROCK_MEMCACHED_VERSION \
    && : "metrics" \
    && ${ROCKS_INSTALLER} install metrics $LUAROCK_METRICS_VERSION \
    && : "prometheus" \
    && ${ROCKS_INSTALLER} install prometheus $LUAROCK_TARANTOOL_PROMETHEUS_VERSION \
    && : "mqtt" \
    && ${ROCKS_INSTALLER} install mqtt $LUAROCK_TARANTOOL_MQTT_VERSION \
    && : "gis" \
    && ${ROCKS_INSTALLER} install gis $LUAROCK_TARANTOOL_GIS_VERSION \
    && : "gperftools" \
    && ${ROCKS_INSTALLER} install gperftools $LUAROCK_TARANTOOL_GPERFTOOLS_VERSION \
    && : "---------- remove build deps ----------" \
    && apk del .build-deps.2

# gh-170: needed for luarocks
RUN apk update \
    && apk add wget git libucontext

RUN mkdir -p /var/lib/tarantool \
    && chown tarantool:tarantool /var/lib/tarantool \
    && mkdir -p /opt/tarantool \
    && chown tarantool:tarantool /opt/tarantool \
    && mkdir -p /var/run/tarantool \
    && chown tarantool:tarantool /var/run/tarantool \
    && mkdir /etc/tarantool \
    && chown tarantool:tarantool /etc/tarantool

VOLUME /var/lib/tarantool
WORKDIR /opt/tarantool

COPY files/tarantool-entrypoint.lua /usr/local/bin/
COPY files/tarantool_set_config.lua /usr/local/bin/
COPY files/docker-entrypoint.sh /usr/local/bin/
COPY files/console /usr/local/bin/
COPY files/tarantool_is_up /usr/local/bin/
COPY files/tarantool.default /usr/local/etc/default/tarantool

RUN ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat
ENTRYPOINT ["docker-entrypoint.sh"]

HEALTHCHECK CMD tarantool_is_up

EXPOSE 3301
CMD [ "tarantool" ]
